name: aks_e2e
on:
  repository_dispatch:
    types: [ok-to-test-command]

jobs:
  get_ref: # Based on https://github.com/Azure/aks-app-routing-operator/blob/main/.github/workflows/test.yaml
    name: "Get ref"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      checkout_ref: ${{ steps.checkout_ref.outputs.CHECKOUT_REF }}
      status_ref: ${{ steps.status_ref.outputs.STATUS_REF }}
    steps:
      # checkout repo so we can ls-remote. we can use main for this
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      # get the ref of the merge commit. we want to get the full sha instead of the tag so we can guarantee
      # it won't change by a user pushing a new change
      - id: checkout_ref 
        env:
          MERGE_REF: 'refs/pull/${{ github.event.client_payload.pull_request.number }}/merge'
        run: |
          CHECKOUT_REF=$(git ls-remote -q | grep $MERGE_REF | awk '{print $1}')
          echo "Ref is $CHECKOUT_REF"
          echo "CHECKOUT_REF=$CHECKOUT_REF" >> $GITHUB_OUTPUT
      # guarantee the ref is what we want to use by ensuring the ok-to-test'd sha matches
      - id: status_ref
        env:
          HEAD_REF: 'refs/pull/${{ github.event.client_payload.pull_request.number }}/head'
          OK_REF_PREFIX:  ${{ github.event.client_payload.slash_command.args.named.sha }}
        run: |
         LATEST=$(git ls-remote -q | grep $HEAD_REF | awk '{print $1}')
         echo "STATUS_REF=$LATEST" >> $GITHUB_OUTPUT
         echo "Comparing latest $LATEST with prefix $OK_REF_PREFIX"
         if [[ $LATEST != $OK_REF_PREFIX* ]]; then
          echo "latest ref doesn't match what was ok-to-test'd"
          exit 1
         fi

  validate_region:
    name: "Validate Region"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      region: ${{ steps.set_region.outputs.REGION }}
    steps:
      # validate and set the region parameter
      - id: set_region
        env:
          REGION_ARG: ${{ github.event.client_payload.slash_command.args.named.region }}
        run: |
          REGION="${REGION_ARG:-canadacentral}"
          
          # Validate region contains only alphanumeric characters
          if [[ ! $REGION =~ ^[a-zA-Z0-9]+$ ]]; then
            echo "Error: Region contains invalid characters. Only alphanumeric characters are allowed."
            exit 1
          fi
          
          echo "Using region: $REGION"
          echo "REGION=$REGION" >> $GITHUB_OUTPUT

  provision_azure:
    name: "Provision Azure"
    runs-on: ubuntu-latest
    needs: [get_ref, validate_region]
    permissions:
      id-token: write
      contents: read
      actions: read
    env:
      AZURE_CORE_OUTPUT: none
      SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          ref: ${{ needs.get_ref.outputs.checkout_ref }}

      - name: Azure Login
        uses: azure/login@6c251865b4e6290e7b78be643ea2d005bc51f69a # v2.1.1
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
      
      - name: Create Resource Group
        uses: Azure/CLI@9f7ce6f37c31b777ec6c6b6d1dfe7db79f497956 # v2.2.0
        with:
          azcliversion: latest
          inlineScript: |
            az group create \
              --name "chme2e${{ github.run_id }}" \
              --location "${{ needs.validate_region.outputs.region }}" \
              --subscription "$SUBSCRIPTION_ID"
      
      - name: Create Azure Container Registry
        uses: Azure/CLI@9f7ce6f37c31b777ec6c6b6d1dfe7db79f497956 # v2.2.0
        with:
          azcliversion: latest
          inlineScript: |
            az acr create \
              --name "chme2e${{ github.run_id }}" \
              --resource-group "chme2e${{ github.run_id }}" \
              --location "${{ needs.validate_region.outputs.region }}" \
              --sku "Standard" \
              --subscription "$SUBSCRIPTION_ID"
            
            # Enable anonymous pull access
            az acr update \
              --name "chme2e${{ github.run_id }}" \
              --anonymous-pull-enabled true

      - name: Build and Push Image to ACR
        uses: Azure/CLI@9f7ce6f37c31b777ec6c6b6d1dfe7db79f497956 # v2.2.0
        with:
          azcliversion: latest
          inlineScript: |
            # Build and push image to ACR
            az acr build \
              --registry "chme2e${{ github.run_id }}" \
              --image "cluster-health-monitor:${{ github.sha }}" \
              --file "docker/cluster-health-monitor.Dockerfile" \
              .
      
      - name: Create AKS Cluster
        uses: Azure/CLI@9f7ce6f37c31b777ec6c6b6d1dfe7db79f497956 # v2.2.0
        with:
          azcliversion: latest
          inlineScript: |
            az aks create \
              --name "chme2e${{ github.run_id }}" \
              --resource-group "chme2e${{ github.run_id }}" \
              --location "${{ needs.validate_region.outputs.region }}" \
              --subscription "$SUBSCRIPTION_ID" \
              --no-ssh-key

  deploy_kubernetes_resources:
    name: "Deploy Kubernetes Resources"
    runs-on: ubuntu-latest
    needs: [get_ref, provision_azure, validate_region]
    permissions:
      id-token: write
      contents: read
      actions: read
    env:
      AZURE_CORE_OUTPUT: none
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          ref: ${{ needs.get_ref.outputs.checkout_ref }}

      - name: Set up Kubectl
        uses: azure/setup-kubectl@776406bce94f63e41d621b960d78ee25c8b76ede # v4.0.1
      
      - name: Azure Login
        uses: azure/login@6c251865b4e6290e7b78be643ea2d005bc51f69a # v2.1.1
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
      
      - name: Set AKS Context
        uses: azure/aks-set-context@c7eb093e5a5d47caa333f64974d5fd1cd4bf069d # v4.0.3
        with:
          cluster-name: "chme2e${{ github.run_id }}"
          resource-group: "chme2e${{ github.run_id }}"
      
      - name: Deploy Kubernetes Resources
        run: |
          # Deploy using kustomize
          cd manifests/overlays/test
          kubectl kustomize . | sed "s|image:.*cluster-health-monitor.*|image: chme2e${{ github.run_id }}.azurecr.io/cluster-health-monitor:${{ github.sha }}|g" | kubectl apply -f - --validate=false

  cleanup:
    name: "Cleanup Resources"
    runs-on: ubuntu-latest
    needs: [get_ref, provision_azure, deploy_kubernetes_resources, validate_region]
    if: always()
    permissions:
      contents: read
      id-token: write
    env:
      AZURE_CORE_OUTPUT: none
      SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
    steps:
      - name: Azure Login
        uses: azure/login@6c251865b4e6290e7b78be643ea2d005bc51f69a # v2.1.1
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
      
      - name: Cleanup Resources
        uses: Azure/CLI@9f7ce6f37c31b777ec6c6b6d1dfe7db79f497956 # v2.2.0
        with:
          azcliversion: latest
          inlineScript: |
            # Delete resource group and all resources
            az group delete \
              --name "chme2e${{ github.run_id }}" \
              --subscription "$SUBSCRIPTION_ID" \
              --yes \
              --no-wait
